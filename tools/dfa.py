import json, sys, argparse

# Enum for event types
#
class EventTypes:
    E_MALLOC = 0
    E_FREE = 1
    E_READ = 2
    E_WRITE = 3

class DFA:
    SAME_ALL = 0
    DIFF_SIZE = 1
    DIFF_FRAME = 2
    DIFF_THREAD = 3

    def __init__(self, init_obj):
        self.cur_state = DFA.SAME_ALL   # Begin our DFA in the SAME_ALL state
        self.init_size = init_obj['size']   # We require the first event upon initalization
        self.objects = {}

    def next_state(self, obj):
        obj_type = obj['type']
        obj_addr = obj['addr']

        if self.cur_state == DFA.SAME_ALL:
            # SAME_ALL state
            # We only move out of this state upon 
            # encountering an event of a different size
            #
            if obj_type == EventTypes.E_MALLOC and obj['size'] != self.init_size:
                self.cur_state = DFA.DIFF_SIZE
        if self.cur_state == DFA.DIFF_SIZE:
            # DIFF_SIZE state
            # TODO: Can't implement this yet because we don't have 
            # exact frames, only files and line numbers
            #
            self.cur_state = DFA.DIFF_FRAME
        if self.cur_state == DFA.DIFF_FRAME:
            # DIFF_FRAME state
            # We move out of this state when an object is freed by 
            # a thread different than that which allocated it
            #
            if obj_type == EventTypes.E_FREE and obj_addr in self.objects:
                if obj['tid'] != self.objects[obj_addr]['tid']:
                    self.cur_state = DFA.DIFF_THREAD

        if obj_type == EventTypes.E_MALLOC: # Add event to dictionary if it's a malloc
            self.objects[obj_addr] = obj
        elif obj_type == EventTypes.E_FREE and obj_addr in self.objects: # Remove it if it's a free
            del self.objects[obj_addr]

    def get_state(self):
        return self.cur_state

# Parse command line arguments
#
parser = argparse.ArgumentParser()
parser.add_argument('--input', type = str, help = 'The path to the output file generated by HeapShark')
args = parser.parse_args()
json_file = '../src/heapshark.json'
if(args.input != None):
    json_file = args.input

# Parse file for data
#
with open(json_file, 'r') as f:
    data = json.load(f)

# Parse data event by event and send each event through
# our DFA
#
my_dfa = DFA(data['events'][0])
for x in data['events']:
    my_dfa.next_state(x)

# Output results
#
# Obviously, these output messages aren't entirely true since
# moving from state to another requires getting to the previous
# state to begin with, but it's a place to start
#
# TODO: would be nice if we could say which lines you would
# replace with custom allocators
#
state = my_dfa.get_state()
if state == DFA.SAME_ALL:
    print('Same size, same frame, same thread')
elif state == DFA.DIFF_SIZE:
    print('Different size, same frame, same thread')
elif state == DFA.DIFF_FRAME:
    print('Different size, different frame, same thread')
else:
    print('Different size, different frame, different thread')

